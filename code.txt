#Step 1: Cloning and Building Darknet

# clone darknet repo
!git clone https://github.com/AlexeyAB/darknet
# change makefile to have GPU and OPENCV enabled
%cd darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
# verify CUDA
!/usr/local/cuda/bin/nvcc --version
# make darknet (build)
!make

#Step 2: Download pretrained YOLOv3 weights

# get yolov3 pretrained coco dataset weights
!wget https://pjreddie.com/media/files/yolov3.weights

# define helper functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
  %matplotlib inline
  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)
  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# use this to upload files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

# use this to download a file  
def download(path):
  from google.colab import files
  files.download(path)

#Step 3: Setting dataset configuration and training

#setting konfigurasi dataset
!cp /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/obj_1024.data /content/darknet/data/obj_1024.data
!cp /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/obj_1024.names /content/darknet/data/obj_1024.names
!cp /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/yolov3_custom_1024.cfg /content/darknet/cfg/yolov3_custom_1024.cfg
!unzip /content/drive/MyDrive/yoloshared/dataset/sawit200x200m_final_validation/obj.zip -d data/
!python /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/generate_train.py
!unzip /content/drive/MyDrive/yoloshared/dataset/sawit200x200m_final_validation/test.zip -d data/
!python /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/generate_test.py

#download pre-trained weights for the convolutional layers.
!wget http://pjreddie.com/media/files/darknet53.conv.74

#training configuration
#ubah save weights 1000 iterasi (line 386) dan chekpoint 2 iterasi (line 397)
!cp /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/detector.c /content/darknet/src/detector.c
# restart/make darknet (build)
!make

#Step 4: run training

# run training starting for the beginning 
!./darknet detector train data/obj_1024.data cfg/yolov3_custom_1024.cfg darknet53.conv.74 -dont_show -map
# run training starting at the checkpoint
!./darknet detector train data/obj_1024.data cfg/yolov3_custom_1024.cfg /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/backup200x200m_final_random0_1024_validation/yolov3_custom_1024_last.weights -dont_show -map

#Step 5: check training results

#checkig mean Average Precision (mAP)
!./darknet detector map data/obj_1024.data cfg/yolov3_custom_1024.cfg /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/backup200x200m_final_random0_1024_validation/yolov3_custom_best.weights -thresh 0.4

#Step 6: run detections

# configuration custom cfg to test mode 
%cd cfg
!sed -i 's/batch=64/batch=1/' yolov3_custom_1024.cfg
!sed -i 's/subdivisions=32/subdivisions=1/' yolov3_custom_1024.cfg
%cd ..

#configuration image.c
#hide class names and labels // line 436,438, 441-446
#configuration of thickness of the bounding box at line 369
!cp /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/image.c /content/darknet/src/image.c
# restart/make darknet (build)
!make

#run detector
!./darknet detector test data/obj_1024.data cfg/yolov3_custom_1024.cfg /content/drive/MyDrive/yoloshared/config/yolov3sawitconvo74/backup200x200m_final_random0_1024_validation/yolov3_custom_1024_8000.weights /content/drive/MyDrive/yoloshared/dataset/Test/final/400x300m_test1.jpg -thresh 0.4 -ext_output -dont_show -out result.json
imShow('predictions.jpg')
download('predictions.jpg')
download('result.json')

